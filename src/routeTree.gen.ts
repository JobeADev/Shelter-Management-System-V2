/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdoptOtherRouteImport } from './routes/adoptOther'
import { Route as AdoptDogsRouteImport } from './routes/adoptDogs'
import { Route as AdoptCatsRouteImport } from './routes/adoptCats'
import { Route as AdoptRouteImport } from './routes/adopt'
import { Route as IndexRouteImport } from './routes/index'

const RescueDetailsPostIdLazyRouteImport = createFileRoute(
  '/rescueDetails/$postId',
)()

const AdoptOtherRoute = AdoptOtherRouteImport.update({
  id: '/adoptOther',
  path: '/adoptOther',
  getParentRoute: () => rootRouteImport,
} as any)
const AdoptDogsRoute = AdoptDogsRouteImport.update({
  id: '/adoptDogs',
  path: '/adoptDogs',
  getParentRoute: () => rootRouteImport,
} as any)
const AdoptCatsRoute = AdoptCatsRouteImport.update({
  id: '/adoptCats',
  path: '/adoptCats',
  getParentRoute: () => rootRouteImport,
} as any)
const AdoptRoute = AdoptRouteImport.update({
  id: '/adopt',
  path: '/adopt',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RescueDetailsPostIdLazyRoute = RescueDetailsPostIdLazyRouteImport.update({
  id: '/rescueDetails/$postId',
  path: '/rescueDetails/$postId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/rescueDetails.$postId.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/adopt': typeof AdoptRoute
  '/adoptCats': typeof AdoptCatsRoute
  '/adoptDogs': typeof AdoptDogsRoute
  '/adoptOther': typeof AdoptOtherRoute
  '/rescueDetails/$postId': typeof RescueDetailsPostIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/adopt': typeof AdoptRoute
  '/adoptCats': typeof AdoptCatsRoute
  '/adoptDogs': typeof AdoptDogsRoute
  '/adoptOther': typeof AdoptOtherRoute
  '/rescueDetails/$postId': typeof RescueDetailsPostIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/adopt': typeof AdoptRoute
  '/adoptCats': typeof AdoptCatsRoute
  '/adoptDogs': typeof AdoptDogsRoute
  '/adoptOther': typeof AdoptOtherRoute
  '/rescueDetails/$postId': typeof RescueDetailsPostIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/adopt'
    | '/adoptCats'
    | '/adoptDogs'
    | '/adoptOther'
    | '/rescueDetails/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/adopt'
    | '/adoptCats'
    | '/adoptDogs'
    | '/adoptOther'
    | '/rescueDetails/$postId'
  id:
    | '__root__'
    | '/'
    | '/adopt'
    | '/adoptCats'
    | '/adoptDogs'
    | '/adoptOther'
    | '/rescueDetails/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdoptRoute: typeof AdoptRoute
  AdoptCatsRoute: typeof AdoptCatsRoute
  AdoptDogsRoute: typeof AdoptDogsRoute
  AdoptOtherRoute: typeof AdoptOtherRoute
  RescueDetailsPostIdLazyRoute: typeof RescueDetailsPostIdLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/adoptOther': {
      id: '/adoptOther'
      path: '/adoptOther'
      fullPath: '/adoptOther'
      preLoaderRoute: typeof AdoptOtherRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/adoptDogs': {
      id: '/adoptDogs'
      path: '/adoptDogs'
      fullPath: '/adoptDogs'
      preLoaderRoute: typeof AdoptDogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/adoptCats': {
      id: '/adoptCats'
      path: '/adoptCats'
      fullPath: '/adoptCats'
      preLoaderRoute: typeof AdoptCatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/adopt': {
      id: '/adopt'
      path: '/adopt'
      fullPath: '/adopt'
      preLoaderRoute: typeof AdoptRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rescueDetails/$postId': {
      id: '/rescueDetails/$postId'
      path: '/rescueDetails/$postId'
      fullPath: '/rescueDetails/$postId'
      preLoaderRoute: typeof RescueDetailsPostIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdoptRoute: AdoptRoute,
  AdoptCatsRoute: AdoptCatsRoute,
  AdoptDogsRoute: AdoptDogsRoute,
  AdoptOtherRoute: AdoptOtherRoute,
  RescueDetailsPostIdLazyRoute: RescueDetailsPostIdLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
